[tool.black]
exclude = "/(\\.direnv|\\.eggs|\\.git|\\.hg|\\.mypy_cache|\\.nox|\\.tox|\\.venv|venv|\\.svn|_build|buck-out|build|dist|generated)/"

[tool.coverage.run]
source = ["custom_components"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "raise NotImplemented()",
]
fail_under = 0
show_missing = true

[tool.isort]
profile = "black"
force_sort_within_sections = true
known_first_party = ["custom_components", "homeassistant", "tests"]
forced_separate = ["tests"]
combine_as_imports = true

[tool.mypy]
python_version = "3.10"
show_error_codes = true
follow_imports = "silent"
ignore_missing_imports = true
local_partial_types = true
strict_equality = true
no_implicit_optional = true
warn_incomplete_stub = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true
enable_error_code = ['ignore-without-code', 'redundant-self', 'truthy-iterable']
disable_error_code = ['annotation-unchecked', 'no-any-return']
strict_concatenate = false
check_untyped_defs = true
disallow_incomplete_defs = true
#disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
warn_return_any = true
warn_unreachable = true

[tool.pylint.MAIN]
py-version = "3.10"
ignore = ["tests"]
fail-on = ["I"]
load-plugins = [
    "pylint.extensions.code_style",
    "pylint.extensions.typing",
    #"hass_enforce_type_hints",
    #"hass_imports",
    #"hass_logger",
    #"pylint_per_file_ignores",
]
persistent = false

[tool.pylint.BASIC]
class-const-naming-style = "any"
good-names = ["Run", "T", "_", "db", "ev", "ex", "fp", "i", "id", "ip", "j", "k"]

[tool.pylint."MESSAGES CONTROL"]
# Reasons disabled:
# format - handled by black
# locally-disabled - it spams too much
# duplicate-code - unavoidable
# cyclic-import - doesn't test if both import on load
# abstract-class-little-used - prevents from setting right foundation
# unused-argument - generic callbacks and setup methods create a lot of warnings
# too-many-* - are not enforced for the sake of readability
# too-few-* - same as too-many-*
# abstract-method - with intro of async there are always methods missing
# inconsistent-return-statements - doesn't handle raise
# too-many-ancestors - it's too strict.
# wrong-import-order - isort guards this
# consider-using-f-string - str.format sometimes more readable
# ---
# Pylint CodeStyle plugin
# consider-using-namedtuple-or-dataclass - too opinionated
# consider-using-assignment-expr - decision to use := better left to devs
disable = [
    "format",
    "abstract-method",
    "cyclic-import",
    "duplicate-code",
    "inconsistent-return-statements",
    "locally-disabled",
    "not-context-manager",
    "too-few-public-methods",
    "too-many-ancestors",
    "too-many-arguments",
    "too-many-branches",
    "too-many-instance-attributes",
    "too-many-lines",
    "too-many-locals",
    "too-many-public-methods",
    "too-many-return-statements",
    "too-many-statements",
    "too-many-boolean-expressions",
    "unused-argument",
    "wrong-import-order",
    "consider-using-f-string",
    "consider-using-namedtuple-or-dataclass",
    "consider-using-assignment-expr",
]
enable = [
    #"useless-suppression",  # temporarily every now and then to clean them up
    "use-symbolic-message-instead",
]

[tool.pylint.REPORTS]
score = false

[tool.pylint.TYPECHECK]
ignored-classes = [ "_CountingAttr" ]
mixin-class-rgx = ".*[Mm]ix[Ii]n"
#ignored-modules = homeassistant,aiohttp,voluptuous

[tool.pylint.FORMAT]
expected-line-ending-format = "LF"

[tool.pylint.EXCEPTIONS]
overgeneral-exceptions = [
    "builtin.BaseException",
    "builtin.Exception",
    "homeassistant.exceptions.HomeAssistantError",
]

[tool.pylint.TYPING]
runtime-typing = false

[tool.pylint.CODE_STYLE]
max-line-length-suggestions = 72

[tool.pytest.ini_options]
addopts = "--cov=custom_components"
testpaths = ["tests"]
norecursedirs = [".git", "testing_config"]
